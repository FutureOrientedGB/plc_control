syntax = "proto3";
package plc;
service PlcService {
  rpc get_types(GetTypeRequest) returns (GetTypeResponse) {}
  rpc get_schema(GetSchemaRequest) returns (GetSchemaResponse) {}
  rpc request_plc(CallPlcRequest) returns (CallPlcResponse) {}
}
// same type device has same message serializer and deserializer
enum PlcDeviceTypeId {
  foo = 0;
  bar = 1;
}
message DeviceType {
  PlcDeviceTypeId id = 1; // unique type id
  string name = 2;        // unique type id string literal
}
message FooTypePlc {}
message BarTypePlc {}
message PlcDeviceInfo {
  DeviceType type = 1;
  oneof address {
    string tcp_address = 2;
    string rs232_address = 3;
    string rs422_address = 4;
    string rs485_address = 5;
  };
  oneof fields {
    FooTypePlc foo = 10;
    BarTypePlc bar = 11;
  };
}
enum ResponseCode {
  ok = 0;
  plc_not_found = 1000;
  plc_offline = 1001;
  plc_control_not_supported = 1002;
  plc_hardware_error = 1003;
  plc_software_error = 1004;
}
message ResponseStatus {
  ResponseCode code = 1; // unique id
  string name = 2;       // unique id string literal
  string message = 3;    // description
}
message GetTypeRequest {}
message GetTypeResponse {
  ResponseStatus status = 1;
  repeated DeviceType types = 2;
}
message GetSchemaRequest { DeviceType type = 1; }
message GetSchemaResponse {
  ResponseStatus status = 1;
  DeviceType type = 2;
  oneof fields {
    FooTypePlc foo = 3;
    BarTypePlc bar = 4;
  };
}
message CallPlcRequest { DeviceType type = 1; }
message CallPlcResponse {
  ResponseCode code = 1;
  string message = 2;
}